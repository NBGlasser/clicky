{"version":3,"sources":["components/pages/ClickContainer.js","App.js","serviceWorker.js","index.js"],"names":["array","i","push","concat","ClickContainer","state","images","1","2","3","4","5","6","7","8","9","10","11","12","score","handleBtnClick","event","id","currentTarget","arr","Object","values","_this","check","bind","assertThisInitialized","setState","this","shuffle","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","react_default","a","createElement","className","src","alt","onClick","Component","App","pages_ClickContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7387124a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nlet array = []\nfor (let i = 1; i < 13; i++) {\n    array.push(`/assets/images/${i}.jpg`)\n}\n\nclass ClickContainer extends Component {\n\n    state = {\n        images: array,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false,\n        \"6\": false,\n        \"7\": false,\n        \"8\": false,\n        \"9\": false,\n        \"10\": false,\n        \"11\": false,\n        \"12\": false,\n        score: 0\n    }\n\n    componentDidMount() {\n        this.shuffle()\n    }\n\n    shuffle() {\n        let array = []\n        for (let i = 1; i < 13; i++) {\n            array.push(`/assets/images/${i}.jpg`)\n        }\n        const shuffle = (array) => {\n            var currentIndex = array.length, temporaryValue, randomIndex;\n\n            while (0 !== currentIndex) {\n\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n\n                temporaryValue = array[currentIndex];\n                array[currentIndex] = array[randomIndex];\n                array[randomIndex] = temporaryValue;\n            }\n\n            return array;\n        }\n        array = shuffle(array)\n        this.shuffle = this.shuffle.bind(this)\n        this.setState({ images: array })\n\n    }\n\n    handleBtnClick = event =>{\n        let id = event.currentTarget.id\n        let arr = Object.values(this.state)\n        this.check = this.check.bind(this)\n        if (arr[id] === false) {\n            this.setState({ id: true })\n            this.setState({ score: (this.state.score + 1) })\n        }\n        else {\n            this.setState({ score: 0 })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div id=\"1\" className=\"col-4\">\n                        <img src={this.state.images[1]} alt=\"img\" />\n                        <br></br>\n                        <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                    </div>\n                    <div id=\"2\" className=\"col-4\">\n                        <img src={this.state.images[2]} alt=\"img\" />\n                        <br></br>\n                        <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                    </div>\n                    <div id=\"3\" className=\"col-4\">\n                        <img src={this.state.images[3]} alt=\"img\" />\n                        <br></br>\n                        <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                    </div>\n                </div>\n\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div id=\"4\" className=\"col-4\">\n                            <img src={this.state.images[4]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                        <div id=\"5\" className=\"col-4\">\n                            <img src={this.state.images[5]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                        <div id=\"6\" className=\"col-4\">\n                            <img src={this.state.images[6]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div id=\"7\" className=\"col-4\">\n                            <img src={this.state.images[7]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                        <div id=\"8\" className=\"col-4\">\n                            <img src={this.state.images[8]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                        <div id=\"9\" className=\"col-4\">\n                            <img src={this.state.images[9]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div id=\"10\" className=\"col-4\">\n                            <img src={this.state.images[10]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                        <div id=\"11\" className=\"col-4\">\n                            <img src={this.state.images[11]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                        <div id=\"12\" className=\"col-4\">\n                            <img src={this.state.images[0]} alt=\"img\" />\n                            <br></br>\n                            <button handleBtnClick={this.handleBtnClick} onClick={this.shuffle}>click</button>\n                        </div>\n                    </div>\n                </div>\n                <h3>Score: {this.state.score}</h3>\n            </div>\n        )\n    }\n}\n\nexport default ClickContainer","import React from 'react';\nimport ClickContainer from \"./components/pages/ClickContainer\"\nfunction App() {\n  return (\n    <ClickContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}